import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from googletrans import Translator, LANGUAGES

# --- Prerequisites ---
# Before running this code, you need to install the googletrans library.
# Open your terminal or command prompt and run the following command:
# pip install googletrans==4.0.0-rc1

def get_language_name(code):
    """Converts a language code to its full name."""
    return LANGUAGES.get(code, "Unknown").capitalize()

def translate_text():
    """Translates the text from the source language to the target language."""
    text_to_translate = input_text.get("1.0", tk.END).strip()
    source_lang_code = source_lang_var.get()
    target_lang_code = target_lang_var.get()

    if not text_to_translate:
        messagebox.showwarning("Warning", "Please enter text to translate.")
        return

    try:
        translator = Translator()
        translated_obj = translator.translate(text_to_translate, src=source_lang_code, dest=target_lang_code)
        
        # Clear previous output and insert new translated text
        output_text.delete("1.0", tk.END)
        output_text.insert("1.0", translated_obj.text)
        
        # Update status bar
        source_name = get_language_name(translated_obj.src)
        target_name = get_language_name(translated_obj.dest)
        status_label.config(text=f"Translated from {source_name} to {target_name}")

    except Exception as e:
        messagebox.showerror("Error", f"Translation failed: {e}")

def copy_to_clipboard():
    """Copies the translated text to the clipboard."""
    translated_content = output_text.get("1.0", tk.END).strip()
    if translated_content:
        root.clipboard_clear()
        root.clipboard_append(translated_content)
        messagebox.showinfo("Success", "Translated text copied to clipboard!")
    else:
        messagebox.showwarning("Warning", "No text to copy.")

# --- UI Setup ---
root = tk.Tk()
root.title("Language Translation Tool")
root.geometry("600x450")
root.configure(bg='#f0f0f0')

# Create a list of common languages for the dropdowns
common_languages = ['en', 'es', 'fr', 'de', 'ja', 'zh-cn', 'ko', 'ru', 'it']
lang_names = {code: LANGUAGES[code].capitalize() for code in common_languages}
language_options = sorted(lang_names.keys(), key=lambda x: lang_names[x])

# Create main frame
main_frame = ttk.Frame(root, padding="10")
main_frame.pack(fill=tk.BOTH, expand=True)

# Input section
input_frame = ttk.LabelFrame(main_frame, text="Input Text", padding="10")
input_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
input_text = tk.Text(input_frame, height=5, width=40, font=('Arial', 12))
input_text.pack(fill=tk.BOTH, expand=True)

# Language selection section
lang_frame = ttk.Frame(main_frame, padding="5")
lang_frame.pack(fill=tk.X, pady=5)

# Source Language Dropdown
ttk.Label(lang_frame, text="Source Language:", font=('Arial', 10)).pack(side=tk.LEFT, padx=(0, 5))
source_lang_var = tk.StringVar(value='en')
source_lang_menu = ttk.OptionMenu(lang_frame, source_lang_var, 'en', *language_options, style='TButton')
source_lang_menu.pack(side=tk.LEFT, padx=(0, 20))

# Target Language Dropdown
ttk.Label(lang_frame, text="Target Language:", font=('Arial', 10)).pack(side=tk.LEFT, padx=(0, 5))
target_lang_var = tk.StringVar(value='es')
target_lang_menu = ttk.OptionMenu(lang_frame, target_lang_var, 'es', *language_options, style='TButton')
target_lang_menu.pack(side=tk.LEFT)

# Button section
button_frame = ttk.Frame(main_frame, padding="5")
button_frame.pack(fill=tk.X, pady=5)

translate_button = ttk.Button(button_frame, text="Translate", command=translate_text, style='Accent.TButton')
translate_button.pack(side=tk.LEFT, padx=(0, 10))

copy_button = ttk.Button(button_frame, text="Copy", command=copy_to_clipboard)
copy_button.pack(side=tk.LEFT)

# Output section
output_frame = ttk.LabelFrame(main_frame, text="Translated Text", padding="10")
output_frame.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
output_text = tk.Text(output_frame, height=5, width=40, font=('Arial', 12), state='normal')
output_text.pack(fill=tk.BOTH, expand=True)

# Status bar
status_label = ttk.Label(root, text="Ready", relief=tk.SUNKEN, anchor=tk.W)
status_label.pack(side=tk.BOTTOM, fill=tk.X)

# Start the GUI event loop
root.mainloop()
